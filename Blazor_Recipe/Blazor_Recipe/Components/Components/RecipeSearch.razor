@using FluentValidation.Results

<MudGrid Class="pa-4 mud-height-full">

    <MudForm @ref="@form">
        <MudItem xs="8">
            <MudTextField @bind-Value="textValue" Label="Ingredient" Variant="Variant.Text" Validation="@(ingredientValidator.Validation)" />
        </MudItem>
        <MudItem xs="4">
            <MudButton Variant=" Variant.Text" Color="Color.Primary" OnClick="AddChips" EndIcon="@Icons.Material.Filled.Add">Add ingredient </MudButton>
        </MudItem>
    </MudForm>
    <MudItem xs="12">
        <MudChipSet AllClosable="true" OnClose="ClosedChips" @bind-Value="chipValues">
            @foreach (string value in chipValues)
            {
                <MudChip Text="@value" Color="Color.Primary" />
            }
        </MudChipSet>
    </MudItem>

    <MudItem xs="8"></MudItem>
    <MudItem xs="4">
        <MudButton Variant=" Variant.Filled" Color="Color.Primary" OnClick="@(() => SearchIngredients())">Search by ingredients</MudButton>
    </MudItem>

</MudGrid>


@code {
    private List<string> chipValues = new List<string>();
    private string textValue { get; set; } = string.Empty;
    private IngredientValidator ingredientValidator = new();
    private IngredientListValidator ingredientListValidator = new();
    private MudForm form;

    [Parameter]
    public EventCallback<List<string>> SearchIngredientsCallback { get; set; }

    private async Task SearchIngredients()
    {
        await SearchIngredientsCallback.InvokeAsync(chipValues);
    }
    private async Task AddChips()
    {

        await form.Validate();

        if (form.IsValid)
        {
            chipValues.Add(textValue);
            textValue = string.Empty;
        }

        Console.WriteLine($"chip values: {string.Join(";", chipValues.Select(x => x))}");
    }
    private void ClosedChips(MudChip chip)
    {
        chipValues.Remove(chip.Text);
    }

}
