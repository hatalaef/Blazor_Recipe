@page "/"
@inject Shared.RecipeService RecipeService
<PageTitle>Home</PageTitle>

@attribute [RenderModeInteractiveServer]
@attribute [StreamRendering(true)]

<MudContainer MaxWidth="MaxWidth.Large">

    <RecipeSearch SearchIngredientsCallback="@GetRecipes" />
    <MudRadioGroup @bind-SelectedOption="@useFakeApiCall">
        <MudRadio Option="@(true)" Color="Color.Primary">Use Fake API Call</MudRadio>
        <MudRadio Option="@(false)" Color="Color.Primary">Use Real API Call (has a daily quota) @apiQuota</MudRadio>
        </MudRadioGroup>
        <div class="mt-8" />
        @if (_recipes is null)
    {
        <MudText Typo="Typo.h5">Loading Recipes...</MudText>
    }
    else
    {

        @foreach (var recipe in _recipes)
        {
            <div class="mt-4">
                <RecipeCard Recipe="recipe" />
            </div>
        }
    }
</MudContainer>

@code {
    private IEnumerable<Shared.Models.Recipe>? _recipes;
    private bool useFakeApiCall { get; set; } = true;
    private string? apiQuota { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _recipes = Enumerable.Empty<Shared.Models.Recipe>();
    }

    private async Task GetRecipes(List<string> ingredients)
    {
        Console.WriteLine($"{nameof(GetRecipes)}: Got ingredients: {string.Join(";", ingredients)}");
        _recipes = null;
        if (useFakeApiCall)
        {
            _recipes = (await RecipeService.GetRecipesAsync_Fake(ingredients)).ToList();
        }
        else
        {
            var result = await RecipeService.GetRecipesAsync(ingredients);
            _recipes = result.Recipes;
            apiQuota = result.ApiQuota != null ? $": {result.ApiQuota}/150 left" : null;
        }

    }
}
