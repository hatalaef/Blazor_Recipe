@page "/"
@inject Shared.RecipeService RecipeService
<PageTitle>Home</PageTitle>

@rendermode InteractiveServer
@attribute [StreamRendering(true)]

<MudContainer MaxWidth="MaxWidth.Large">

    <MudPaper Elevation="5">
        <RecipeSearch SearchIngredientsCallback="@GetRecipes" />
        <div class="mt-4 pa-4">
            @if (_apiQuota is null)
            {
                <MudText Typo="Typo.h5">Loading...</MudText>
            }
            else
            {
                <MudRadioGroup @bind-SelectedOption="@_useFakeApiCall">
                    <MudRadio Option="@(true)" Color="Color.Primary">Use Fake API Call (ingredients ignored)</MudRadio>
                    <MudRadio Option="@(false)" Color="Color.Primary">Use Real API Call (has a daily quota) @_apiQuota</MudRadio>
                    </MudRadioGroup>
            }
        </div>
    </MudPaper>
    <div class="mt-8" />
    @if (_recipes is null)
    {
        <MudPaper Class="pa-8">
            <MudText Align="Align.Center" Typo="Typo.h4">Loading Recipes...</MudText>
        </MudPaper>
    }
    else
    {

        @if (_noRecipesFound)
        {
            <MudPaper Class="pa-8">
                <MudText Align="Align.Center" Typo="Typo.h4">No recipes found</MudText>
            </MudPaper>
        }
        else
        {
            @foreach (var recipe in _recipes)
            {
                <div class="mt-4">
                    <RecipeCard Recipe="recipe" />
                </div>
            }

        }
    }
</MudContainer>

@code {
    private IEnumerable<Shared.Models.Recipe>? _recipes;
    private bool _useFakeApiCall { get; set; } = true;
    private string? _apiQuota { get; set; }
    private bool _noRecipesFound = false;

    protected override async Task OnInitializedAsync()
    {
        _recipes = Enumerable.Empty<Shared.Models.Recipe>();
        double result = await RecipeService.GetQuota();
        SetQuotaString(result);
    }

    private async Task GetRecipes(List<string> ingredients)
    {
        Log.Logger.Debug($"{nameof(GetRecipes)}: Got ingredients: {string.Join(";", ingredients)}");
        _recipes = null;
        if (_useFakeApiCall)
        {
            _recipes = (await RecipeService.GetRecipesAsync_Fake(ingredients)).ToList();
        }
        else
        {
            var result = await RecipeService.GetRecipesAsync(ingredients);
            _recipes = result.Recipes;
            SetQuotaString(result.ApiQuota);
        }
        _noRecipesFound = _recipes.Count() == 0;
    }

    private void SetQuotaString(double? quota)
    {
        if (quota != null)
        {
            _apiQuota = $": {quota}/150 left";
        }
    }
}
